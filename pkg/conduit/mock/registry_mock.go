// Code generated by MockGen. DO NOT EDIT.
// Source: ./plugin_registry.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	plugin "github.com/conduitio/conduit/pkg/plugin"
	gomock "github.com/golang/mock/gomock"
)

// MockPluginRegistry is a mock of PluginRegistry interface.
type MockPluginRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockPluginRegistryMockRecorder
}

// MockPluginRegistryMockRecorder is the mock recorder for MockPluginRegistry.
type MockPluginRegistryMockRecorder struct {
	mock *MockPluginRegistry
}

// NewMockPluginRegistry creates a new mock instance.
func NewMockPluginRegistry(ctrl *gomock.Controller) *MockPluginRegistry {
	mock := &MockPluginRegistry{ctrl: ctrl}
	mock.recorder = &MockPluginRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginRegistry) EXPECT() *MockPluginRegistryMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockPluginRegistry) Register(ctx context.Context, path string) (plugin.FullName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, path)
	ret0, _ := ret[0].(plugin.FullName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockPluginRegistryMockRecorder) Register(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockPluginRegistry)(nil).Register), ctx, path)
}
